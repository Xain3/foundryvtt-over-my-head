# Constants for the module
# This file contains constants that are used throughout the module.
# It is recommended to use this file to define constants that are used in multiple places.
# This file will be parsed into a JavaScript object (in constants.js), which can be used in the module.

# How to refer to the module in the logs
# Can be "title", "id", "name", or "shortName"
referToModuleBy: "title"

# Configuration constants for Foundry VTT module management
#
# defaultFoundryModulesLocation:
#   Description: Specifies the default path where Foundry VTT modules are located within the game system
#   Type: String
#   Default: "game.modules"
#   Usage: Used as a reference point for module discovery and management operations. Path is relative to the global namespace.
defaultFoundryModulesLocation: "game.modules"

# How to structure error messages
errors:
  separator: " || " # The separator used to join multiple error messages
  pattern: "{{module}}{{caller}}{{error}}{{stack}}"  # The pattern used to format error messages

# Constants relative to context and state management
context:
  operationsParams:
    # Default parameters for context operations
    defaults:
      alwaysPullBeforeGetting: false
      alwaysPullBeforeSetting: false
      pullFrom: []
      alwaysPushAfterSetting: false
      pushTo: []
      errorHandling: {
      # Possible values: warn, throw, silent
        onPullError: 'warn',
        onPushError: 'warn',
        onValidationError: 'throw'
      }

  # How to structure the context object
  external:
    defaults:
      rootIdentifier: "module" # The default identifier for the root object of the context.
      pathFromRoot: "context" # The default path of the context relative to the root object.
    rootMap:
  window: "window"  # The root object for the context, typically the global window object.
  document: "document"  # The root object for the context, typically the global document object.
  game: "game"  # The root object for the game context, typically the global game object.
  user: "game.user"  # The root object for the user context, typically the global game user object.
  world: "game.world"  # The root object for the world context, typically the global game world object.
  canvas: "canvas"  # The root object for the canvas context, typically the global canvas object.
  ui: "ui"  # The root object for the UI context, typically the global UI object.
  local: "localStorage"  # The root object for local storage, typically the global localStorage object.
  session: "sessionStorage"  # The root object for session storage, typically the global sessionStorage object.
  module: "module"  # The root object for the module context, typically the module's own namespace.
  invalid: null  # An invalid root object, used to indicate an error or uninitialized state.

  sync:
    # Default synchronization configuration
    defaults:
      autoSync: true  # Whether to automatically synchronize data with the remote context
      pullBeforeGet: true  # Whether to pull data from the remote context before getting it
      pushAfterSet: true  # Whether to push data to the remote context after setting it
      syncStrategy: "mergeNewerWins"  # The default synchronization strategy to use
      syncThrottleMs: 1000  # The default throttle time in milliseconds for synchronization operations
      deepSync: true  # Whether to perform deep synchronization of objects
      compareBy: "modifiedAt"  # The default method to compare objects for synchronization

    # Available sync strategies
    strategies:
      - "mergeNewerWins"  # Merge changes from the remote context, preferring newer values
      - "mergeOlderWins"  # Merge changes from the remote context, preferring older values
      - "overwriteLocal"  # Overwrite local data with remote data
      - "overwriteRemote"  # Overwrite remote data with local data
      - "manual"  # Manual synchronization, no automatic merging or overwriting

    # Available comparison methods
    comparisonMethods:
      - "modifiedAt"  # Compare objects based on their last modified timestamp
      - "createdAt"  # Compare objects based on their creation timestamp
      - "version"  # Compare objects based on their version number
      - "hash"  # Compare objects based on their hash value

  # NOTE: The "naming" and "schema" values above are for backwards compatibility only.
  # Do not change these unless absolutely necessary, as doing so will likely cause errors.
  # They are not intended for modification.
  naming:
    # The name of the state object
    state: "state"
    # The name of the settings object
    settings: "settings"
    # The name of the flags object
    flags: "flags"
    # The name of the data object
    data: "data"
    # The name of the manifest object
    manifest: "manifest"
    # The name of the timestamp
    timestamp: "timestamp"

  # The schema for the context object to be used in validations
  schema:
    manifest: 'object'
    constants: 'object'
    flags: 'object'
    data: 'object'
    settings: 'object'
    timestamp: 'number'

# Constants relative to placeables
placeables:
  token:
    type: "token"
    name: "Token"
    class: "TokenDocument"
    allowedCorners:
      - "top-left"
      - "top-right"
      - "bottom-left"
      - "bottom-right"
  tile:
    type: "tile"
    name: "Tile"
    class: "TileDocument"
    allowedCorners:
      - "top-left"
      - "top-right"
      - "bottom-left"
      - "bottom-right"

# Constants for context helpers
contextHelpers:
  mergeStrategies:
    MERGE_NEWER_WINS: "mergeNewerWins"
    MERGE_SOURCE_PRIORITY: "mergeSourcePriority"
    MERGE_TARGET_PRIORITY: "mergeTargetPriority"
    UPDATE_SOURCE_TO_TARGET: "updateSourceToTarget"
    UPDATE_TARGET_TO_SOURCE: "updateTargetToSource"
    REPLACE: "replace"
    NO_ACTION: "noAction"

  comparisonResults:
    SOURCE_NEWER: "sourceNewer"
    TARGET_NEWER: "targetNewer"
    EQUAL: "equal"
    SOURCE_MISSING: "sourceMissing"
    TARGET_MISSING: "targetMissing"
    BOTH_MISSING: "bothMissing"
    CONTAINER_A_NEWER: "containerANewer"
    CONTAINER_B_NEWER: "containerBNewer"
    CONTAINER_A_MISSING: "containerAMissing"
    CONTAINER_B_MISSING: "containerBMissing"

  defaultComponents:
    - "schema"
    - "constants"
    - "manifest"
    - "flags"
    - "state"
    - "data"
    - "settings"

  errorMessages:
    invalidSourceTarget: "Source and target contexts must be provided"
    emptyItemPaths: "Item paths must be a non-empty array"
    emptySources: "Sources must be a non-empty array of contexts"
    emptyTargets: "Targets must be a non-empty array of contexts"
    emptyTarget: "Target context must be provided"
    unsupportedObjectType: "Unsupported object type for synchronization"
    unsupportedObjectTypes: "Unsupported object types for synchronization"
    incompatibleTypes: "Incompatible object types: type mismatch between source and target"
    invalidMergeContext: "Invalid source or target context for merge operation"
    unknownSyncOperation: "Unknown synchronization operation: {operation}"
    cannotOverwriteFrozen: "Cannot overwrite frozen item at key \"{key}\". Use ignoreFrozen option to force overwrite."
    keyRenamed: "Key \"{key}\" is reserved. It will been renamed to \"_{key}\"."

# Required attributes for a valid manifest (from https://foundryvtt.com/article/module-development/)
requiredManifestAttributes:
- "id"
- "title"
- "description"
- "version"

# The following constant is used only for testing purposes
testConstant: "testValue" # DO NOT CHANGE THIS VALUE